@use "abstracts/variables" as *;
@use "abstracts/mixins/breakpoints" as *;

@mixin make-container($prefix: $bs-prefix, $spacing: 1rem) {
  --#{$prefix}-gutter-x: $spacing;

  width: 100%;
  padding-right: calc(var(--#{$prefix}-gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{$prefix}-gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-right: auto;
  margin-left: auto;
}

@mixin make-containers($prefix: $bs-prefix, $spacing: 1rem,
  $container-max-widths: $bs-container-max-widths, $grid-breakpoints: $bs-grid-breakpoints) {
  .container,
    // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container($prefix, $spacing);
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if $extend-breakpoint {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if $breakpoint == $name {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}
